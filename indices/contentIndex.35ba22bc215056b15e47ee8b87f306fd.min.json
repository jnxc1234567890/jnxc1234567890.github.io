{"/":{"title":"Niceme's Wiki","content":"## About the Wiki\n\nWelcome to my personal wikipedia!\n\n## MOC of the Wiki\nThe wiki includes knowledge from these subjects:\n- Computer Science\n\t1. [Computer Architecture](wikipages/Computer%20Architecture.md)\n\t2. [Software Engineering](wikipages/Software%20Engineering.md)\n\t3. [[wikipages/Artificial Intelligence|Artificial Intelligence]]\n- Mathematics\n\t1. [Calculus](wikipages/Calculus.md)\n\t2. [[wikipages/Linear Algebra|Linear Algebra]]\n\t3. [[wikipages/Differential Equations|Differential Equations]]\n- Electrical Engineering\n- Social Science\n\t1. [[wikipages/Economics|Economics]]\n\n\n## Content Lists\nIf you prefer browsing the contents of this site through a list instead of a graph, you can find content lists here too:\n\n- [All Notes](/notes)\n- [All Wiki Pages](/wikipages)","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-1":{"title":"ECE120 Lecture 1 - Abstraction and Representation","content":"## Abstraction Layer\nWhile constructing computers, we can use the idea of abstraction to make things easier:\n![[lecture_notes/ECE120/images/Pasted image 20220414144524.png]]\n\n## Representations\n### Definition of representation\nThe mapping from one form to another is called a representation.\n\n### Necessary condition of representations\n- Well-defined\n- Unambiguous","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-14":{"title":"ECE120 Lecture 14","content":"---\n\n## Power of Two Checker\n\nHow to check whether a number is the power of 2? It's very easy for us human to do that because power of 2 has only one 1 bit in binary.\n\nThe same applies for a circuit, we just need to check how many 1 bits are there in a number!\nWe would still use a bit-sliced design (but in **2**-bit sliced). To represent all the situations, we'll need 2 bits.\n\n| C1  | C0  | meaning             |\n|","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-15":{"title":"ECE120 Lecture 15","content":"","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-16":{"title":"ECE120 Lecture 16 - Storing a Bit","content":"---\n## Sequential Logic\n**Combinational logic** allows us to solve the following type of problem:\n- given a set of bits as input\n- how can we combine them to produce other sets of bits (Boolean expressions)?\n\n**Sequential logic**:\n- stores bits as state\n- its behavior depends on the state (the values of the stored bits)\n\n## R'-S' Latch\nThe **R'-S' latch** is a widely used sequential logic circuit used for storing a bit.\n\nThe diagram is as follows:\n![[lecture_notes/ECE120/images/Pasted image 20220505001852.png]]\n\nThe behavior of an R'-S' latch:\n| $\\overline{R}$ | $\\overline{S}$ | Effect           |\n|","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-17":{"title":"ECE120 Lecture 17 - Static Hazards and Registers","content":"## Static Hazards (Optional)\n\n\n## Registers\nA **register** is a storage element composed from one or more flip-flops operating on a common clock.\n\n### Clock Gating Implementation\n\n\n### MUX Implementation","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-18":{"title":"ECE120 Lecture 18 - Serialization","content":"## Serial Design\nWe could instead use one copy of the bit slice, and pass the bit slice’s M outputs back as inputs in the next clock cycle. Such an implementation is a **serial design** because it handles one bit at a time.\n\n### Common Template for Serialization\n![[lecture_notes/ECE120/images/Pasted image 20220505231624.png]]\n\n## Example 1: Serial \n\n## Example 2:","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-19":{"title":"ECE120 Lecture 19 - FSM and Binary Counter","content":"---\n\n## FSM\n### Definition of FSM\nA **Finite State Machine** consists of five parts:\n1. Finite set of states\n2. Set of inputs\n3. Set of outputs(only dependent on state)\n4. Set of transition rules\n5. Methods for calculating outputs\n\n### Digital FSM\nWe implement FSM in digital system as sequential logic circuits.\n\n### Keyless Entry Example\n#### State Table\n\n| meaning              | state    | driver’s door | other doors | alarm on? |\n|","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-2":{"title":"ECE120 Lecture 2 - Numerical Representation","content":"## Unsigned [[lecture_notes/ECE120/ECE120 Lecture 1#Definition for representation|Representation]]\nIn order to represent an integer, the computer uses base-2 numbers from mathematics (aka. binary).\nDue to hardware limitations, we cannot create representations that use arbitrary number of bits. Therefore, we use some fixed numbers of bits to represent a certain group of numbers, which introduced leading 0s.\ne.g.\n$$\n\\begin{align*}\n17_{10}=00010001_2 \\\\\n42_{10}=00101010_2 \n\\end{align*}\n$$\n### Conversion from Binary to Decimal\nThe conversion from binary to decimal is quite straight forward, because the $i$th bit in binary represents $2^{i-1}$ .\ne.g. Convert $01001_2$\n\n$$\n01001_2 = (0 \\cdot 2^4 + 1 \\cdot 2^3+0 \\cdot 2^2+0 \\cdot 2^1+1 \\cdot 2^0)_{10}=9_{10}\n$$\n\n### Conversion from Decimal to Binary\nIt might not seem so straightforward as the previous one, but the core idea is the same.\ne.g. Convert $9_{10}$ to a 5-bit binary.\n$$\n\\begin{align*}\n\u0026\\text{Assume } 9_{10} = a_4\\cdot 2^4 + a_3\\cdot 2^3 + a_2\\cdot 2^2+a_1\\cdot 2^1+a_0\\cdot2^0. \\\\\n\u0026\\text{Clearly, the parity of the number determined }a_0. \\\\\n\u0026(9-a_0) \\div 2 = a_4\\cdot 2^3 + a_3\\cdot 2^2 + a_2\\cdot 2^1+a_1\\cdot 2^0 \\\\\n\u0026\\text{Clearly, the parity of the number determined } a_1. \\\\\n\u0026((9-a_0)-a_1) \\div 2=a_4\\cdot 2^2 + a_3\\cdot 2^1 + a_2\\cdot 2^0 \\\\\n\u0026\\text{ Clearly, the parity of the number determined } a_2. \\\\\n\u0026\\cdots\n\\end{align*}\n$$\n\n## Addition of Unsigned Representation\nBinary addition is almost the same as decimal addition.\ne.g. $01001_2+01110_2$\n$$\n\\begin{align*}\n_1\\quad \\quad  \u0026\\\\\n01001\u0026\\\\\n+01110\u0026\\\\\n\\hline\n10111\u0026\n\\end{align*}\n$$\nHowever, sometimes things go wrong.\ne.g. $01001_2+11110_2$\n$$\n\\begin{align*}\n_{1\\ 1} \\quad \\quad  \u0026\\\\\n01001\u0026\\\\\n+11110\u0026\\\\\n\\hline\n①10111\u0026\n\\end{align*}\n$$\nNote there is a carry out 1. Because of bit limitation, it did not appear in the final result, causing a mismatch. This kind of phenomena is called overflow.\n\nTo sum up, the addition result of $N$ bit binary is\n$$\nS = (A+B)\\mod 2^N\n$$\n\n## 2's Complement\nHere comes the question, how to store negative numbers?\n\nThe easiest way is [[Sign-Magnitude]]. But our topic today focuses on 2's complement representation, which is the most widely used representation in computers nowadays.\n\nThe key concept of 2's complement representation is to make use of the same addition component as unsigned representation, which is to say,\n$$\n\\begin{align*}\n\u0026\\text{For a negative number }-k, \\text{ we wish to find its reprentation }P_k.\\\\\n\u0026\\text{So that }\\forall N \\in \\mathbb{Z}, \\text{we have }(-k+N)\\equiv(P_{k}+N) \\mod 2^{N}.\n\\end{align*}\n$$\nIt's easy to find that the appropriate $P_{k}$ should be $2^{N}-k$.\n\nThe representation of $P_{k}=2^{N}-k$ is called **2' complement** representation. It has the advantage of using the same addition circuit with unsigned representation.\n\n## Sign-Magnitude (optional)\nSign-Magnitude representation is used","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-20":{"title":"ECE120 Lecture 20","content":"## Machine Models\nThere're two types of FSMs in history:\n- Moore machine, outputs depend only on state\n- Mealy machine, outputs may also depend on inputs\n\n##","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-21":{"title":"ECE120 Lecture 21 - FSM for Lab 9","content":"","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-24":{"title":"ECE120 Lecture 24 - Memory","content":"---\n## Storing Lots of Bits\nThe computer we’re going to design has a lot of places to store bits. Each place stores 32 bits. We need names for the places. The best way is to assign them with a number.\n\nBut with so many bits, how to access one or multiple of them? We need to build a circuit that lets us read and write the bits stored in each place.\n\nThe circuit should have:\n- Input ADDR: Tell the circuit the address we want\n- Output DATA-OUT: The data stored in ADDR.\n- Input DATA-IN: The data we wish to store in ADDR.\n- Input WE: Tell the circuit whether we want to read or write (write enable).\n\n## Memory\nThe circuit we proposed is called **memory**. The symbol diagram below well illustrates it.\n![[lecture_notes/ECE120/images/Pasted image 20220414213722.png]]\n\nCS means “chip select”. If CS = 1, the memory reads or write; if CS = 0, the memory does nothing.\n\n### Certain Restrictions in ECE120\n1. The memory we talk about in ECE120 is **Random Access Memory (RAM)**. Addresses can be read/written (accessed) in any order and the time required to read/write an address does not depend (much) on the address.\n2. Besides, we consider only volatile forms of RAM, which lose their bits if electrical power is turned off.\n3. There're mainly two types of RAM:\n\t- **Static RAM (SRAM)** uses a two-inverter loop to store a bit retains bit indefinitely while powered. (faster, less dense)\n\t- **Dynamic RAM (DRAM)** uses a capacitor to store a bit loses bit over time (_even with electricity!_), so must be refreshed (rewritten) periodically. (slower, more dense)\n4. We only talk about SRAM here.\n\n## SRAM Cell\nThis is a SRAM cell.\n![[lecture_notes/ECE120/images/Pasted image 20220414214504.png]]\n\nTwo n-type MOSFETs connect the two inverters to the bit lines ($BIT$ and $BIT’$). When $SELECT = 1$, the bit is connected to the bit lines. When $SELECT = 0$, this cell is disconnected.\n\n### Write a Bit\nTo write a bit in SRAM cell, simply set $SELECT = 1$, then set bit lines held at opposite values. This will force the inverters to store the bit.\n![[lecture_notes/ECE120/images/Pasted image 20220414214705.png]]\n\nThis operation is a bit dangerous, because it wires together outputs! Changing one bit means short circuit, so the system must be designed carefully.\n\n### Read a Bit\nTo read bits from the cell, $BIT$ and $BIT'$ should be left floating. Then $SELECT=1$ will write bits to two lines.\n![[lecture_notes/ECE120/images/Pasted image 20220414215030.png]]\n\nNormally, to speed up reads, bit lines are pre-charged to $V_{dd}/2$, and sense amplifiers (analog devices) amplify any changes in voltage between bit lines to 0/1.\n\n### 6T Cell\nThe SRAM cell design is called 6T Cell because it has 6 transistors. The designed is commonly used due to its balance of speed and good reliability with small size.\n\n## Memory Control Circuit\nBelow is a $16\\times 1$ memory.\n![[lecture_notes/ECE120/images/Pasted image 20220414215508.png]]\n\nWhen $CS=1$, the decoder activates the specified cell and then the read/write logic is ready to read or write to the specified cell.\n\n### Non-Clocked Memory\nRemind that memory is not clocked by $CLK$ signal. So we need to ensure a read/write has finished before the next move.\n\nThere're two ways to accomplish this:\n1. The memory designer specifies a minimum wait time (in the datasheet) for a read/write to complete.\n2. Or the memory raises an output (called R in Patt and Patel) to indicate that it is Ready for another operation.\n\n### Balance of Speed and Size\nWhen the memory gets larger, the decoder will expand with size. This causes the circuit size very large.\n\nWe can use a technique called **Coincident Selection** to significantly reduce the number of gates required. The technique is simply putting a new decoder like the graph below.\n![[lecture_notes/ECE120/images/Pasted image 20220414220058.png]]\n\n### Expanding Memory\n#### More Addresses\nGiven two $2^{k}×N$-bit memories, construct a $2^{k+1}×N$-bit memory.\n![[lecture_notes/ECE120/images/Pasted image 20220414220617.png]]\n#### Wider Addressability\nGiven two $2^{k}×N$-bit memories, construct a $2^{k}×(2N)$-bit memory.\n![[lecture_notes/ECE120/images/Pasted image 20220414220633.png]]\n\n## Tri-State Buffer\nThe small triangle is a **tri-state buffer**.\n![[lecture_notes/ECE120/images/Pasted image 20220414221133.png]]\n\n| EN  | IN  | OUT |\n|","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-25":{"title":"ECE120 Lecture 25 - From FSM to Computer","content":"---\n\n## FSM and Code\nTheoretically, finite state machines can solve any kinds of problems that computer language codes can solve. (Because computers are also finite state machines!)\n\nLook at the example code below.\n\n```c\nint values[10];\nint idx;\nint min = values[0];\nfor (idx = 1; 10 \u003e idx; idx = idx + 1) \n{\n\tif (min \u003e values[idx])\n\t{\n\t\tmin = values[idx];\n\t} \n}\n```\n\nHow to transform this code into a finite state machine?\n\n## Code Analysis\n\n### Array -\u003e Memory\nWhat does this mean?\n```c\nint values[10];\n```\n\nWe created ten 32-bit 2’s complement numbers (ten ints). Such a group is called an array. An **array** is the software analogue of a **memory**.\n\n### Flow Chart\n```mermaid\nflowchart LR\n\tsubgraph INIT\n\t\tdirection TB\n\t\tstart(START)\n\t\tinit1[\"min = values[0]\"]\n\t\tstart --\u003e init1\n\t\tinit2[\"idx = 1\"]\n\t\tinit1 --\u003e init2\n\tend\n\tINIT --\u003e LOOP\n\tsubgraph LOOP\n\t\tcompare1{\"10 \u003e idx?\"}\n\t\tcompare2{\"min \u003e values [idx]?\"}\n\t\tcompare1 --\u003e|TRUE| compare2\n\t\tadd[\"idx = idx + 1\"]\n\t\tcompare2 --\u003e|FALSE| add\n\t\tadd --\u003e compare1\n\t\tsetmin[\"min = values[idx]\"]\n\t\tcompare2 --\u003e|TRUE| setmin\n\t\tsetmin --\u003e add\n\tend\n\tdone(DONE)\n\tLOOP --\u003e done\n```\n\nThis is the entire flow chart of the C code. The division of the graph is done according to programming ideas. But in FSM, things won't be so easy, there's no LOOP and IF in FSM. So we need to be more specific.\n\n### Components\n1. Array -\u003e Memory\n2. Other variables -\u003e registers/ counters\n3. The if statement -\u003e a comparator\n\n### Modifying INIT\nAs a matter of fact, the first time performing `10 \u003e idx` is clearly TRUE. So we don't actually need to compare 10 and idx in the init cycle, the statement could be integrated into INIT.\n\n### Adding WAIT\nThe FSM circuit should be ready for another use, so START and DONE should be in the same state called WAIT, which means the circuit is ready for a new run.\n\n### Combining COPY\nThe two following statements:\n```c\nmin = values[idx];\nidx = idx + 1;\n```\n\nThey're actually independent of each other (`min` and `idx` doesn't have to do with each other), so we can do the two operations at the same time. We'll then call this state COPY.\n\n### PREP and COMPARE\nUnlike `idx` which is stored in registers, while comparing `values[idx]`, we need to read inputs from a memory and perform a serial comparison.\n\nTherefore, we actually need two states for the if statement `if (min \u003e values[idx])`.\n\n- PREP state:\n\t- Copies `min` to shift register A\n\t- Copies `values[idx]` to shift register B\n\t- Resets the counter to 0.\n- COMPARE state:\n\t- The serial comparator performs the comparison.\n\t- When the counter has value 31, the FSM moves to the COPY state.\n\n### Abstract State Transition Diagram\n```mermaid\nstateDiagram-v2\n\tdirection LR\n\tWAIT --\u003e INIT:START signal\n\tINIT --\u003e PREP:always\n\tPREP --\u003e COMPARE:always\n\tCOMPARE --\u003e COPY:counter is 31\n\tCOPY --\u003e PREP:not end of loop\n\tCOPY --\u003e WAIT:end of loop\n```\n## Designing the Datapath\n### IDX - Binary Counter\nWe could use a 4-bit binary counter for `idx` called IDX.\n\nIt should have:\n- a CNT input to control counting\n- a reset input RST\n- output of internal states\n\n### Memory VALUES Use IDX as ADDR\nVALUES could be a 16×32-bit memory to represent `values`.\n\nNotice that we only read from memory, and we always read `values[idx]`.\n\nSo, we could make the memory always read, and connect the IDX counter to ADDR.\n\n### MIN Only Needs to Load VALUES[IDX]\nMIN could be a 32-bit register to represent `min`.\n\nRemind that `min` either reads `values[idx]` or keeps its value. So we can:\n- Connect VALUES data output to MIN data input.\n- Use input LD to indicate whether or not read `values[idx]`\n\n### A and B are Shift Registers\nAs mentioned earlier, A and B are shift registers.\n\nIn PREP, we set A to MIN and B to VALUES[IDX]. So, we wire directly from MIN to A , and from VALUES output to B.\n\n### Use a Binary Counter to Control the Comparator\nFinally, we need a counter to drive the serial comparator for 32 cycles. Let’s use a 5-bit binary counter, CNT. \nTo reset the counter, use a reset input, RST.\nComparator has an F / “first bit” input. CNT should generate a zero output Z.\n\n### Datapath\nThis is the datapath of our FSM:\n![[lecture_notes/ECE120/images/Pasted image 20220415185351.png]]\n\n#### How does the datapath relate to the FSM?\nNot all signals into the datapath are fixed. Remaining input signals to the components in the datapath are called control signals. Control signals are **outputs of the FSM**. \n\nUsing these signals, each state of the FSM causes the elements of the datapath to perform actions associated with the state.\n\n## Designing The FSM\n### Outputs and Inputs of FSM\nOur datapath has 6 control signals, which are outputs of FSM:\n- IDX.RST\n- IDX.CNT\n- MIN.LD\n- A.LD\n- B.LD \n- CNT.RST\n\nOur datapath also generates 3 outputs, which are inputs of FSM:\n- DONE\n- LAST\n- THEN\n\n### Register Transfer Language\nWe’ll use **register transfer language (RTL)** notation to describe the state’s actions on the datapath.\n\n| state   | actions(simultaneous)                    | condition         | next state       |\n|","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-26":{"title":"ECE120 Lecture 26 - The von Neumann Model","content":"## The von Neumann Model\nIn 1946, _John von Neumann_ invented a model for computer organization in which a computer comprises five parts.\n\n- Memory\n- Processing Unit\n- Input\n- Output\n- Control Unit\n\n### Memory\nThe computer’s instructions (program) are stored in the **memory**.\n\nThe memory uses two registers to manage data: \n- The **Memory Address Register** (MAR) holds the address on which the memory operates (to read or to write). \n- The **Memory Data Register** (MDR) holds the bits read from the memory, or the bits to write to the memory.\n\n### Processing Unit\nA computer also contains a **processing unit**, which performs all operations. and defines the word size for the computer, the number of bits used in most computations.\n\nThe Processing Unit includes an ALU and a register file:\n- **Arithmetic Logic Unit** (ALU) to handle the operations.\n- a **register file** for temporary storage of values, which is fast but small.\n\n### Input and Output\nA computer also needs the ability to get input from outside, and to deliver results to the external world. The von Neumann model includes both input and output.\n\n### Control Unit\nThe control unit (an FSM) uses two registers: \n- **The Program Counter** (PC) holds the address of the next instruction. \n- **The Instruction Register** (IR) holds the bits of the current instruction.\n\n### Diagram\n```mermaid\nflowchart LR\n\ti --\u003e j\n```\n\n## LC-3 as a von Neumann Machine\nThe Little Computer-3 (LC-3) ISA is an educational tool.","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-27":{"title":"ECE120 Lecture 27 - Instruction formats and instruction processing","content":"## Instruction Formats\n\n\n## LC-3 ISA\nIn all, LC-3 ISA has three kinds of opcodes:\n- operations\n- data movement\n- control flow\n\n### Operations\n#### ADD\n\n#### AND\n\n#### NOT\n\n###","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-28":{"title":"ECE120 Lecture 28","content":"##","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-29":{"title":"ECE120 Lecture 29 - LC-3 binary program analysis: counting to 10","content":"## From FSM to LC-3\nWe have already implemented a binary counter using FSM in [[lecture_notes/ECE120/ECE120 Lecture 19|Lecture 19]].\n\nBut now we're going to try something different! Implement an LC-3 program doing the same job: counting to 10.\n\n## Three Types of Adressing Design\nWe have three diffent types of adressing mode:\n- \n\n## LC-3 Binary Code\n```\n;LDI R3, x09F\n```","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-3":{"title":"ECE120 Lecture 3","content":"","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-30":{"title":"ECE120 Lecture 30 - ","content":"","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-32":{"title":"ECE120 Lecture 32 - LC-3 Programming example: letter frequency counter","content":"## Letter Frequency Counter\nWe wish to design a program that:\n- given an ASCII string (a sequence of characters terminated by a `NUL`, ASCII `x00`)\n- count the occurrences of each letter (regardless of case)\n- and count the number of non-alphabetic characters.\n\n## Planning\n### Algorithm I: Look Through String Once for Each Letter\nA possible approach is to look for occurrences of each letter one by one.\n```\nfor each letter (and once for non-letters)\n\tcount = 0 \n\tfor each character in the string\n\tif character matches letter (either case)\n\t\tcount = count + 1\n\tstore count for the letter in histogram\n```\n\n### Algorithm II: Look through String Once\n\n```\ninitialize 27-bin histogram to all 0s\nfor each character in the string\n\tincrement the appropriate histogram bin\n```\n\n### Algorithm III: Build a Bigger Histogram\n```\ninitialize 128-bin histogram to all 0s\nfor each character in the string\n\tincrement bin for that character\nfor each letter\n\tadd the two corresponding bins\nsum all non-letter bins\n```\n\n### The Best Algorithm Depends\nThe best algorithm depends on the metrics you choose. But we'll go with algorithm II here because it's both time-efficient and space-efficient.\n\n## Flowchart","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-4":{"title":"ECE120 Lecture 4","content":"## Representations for fractions\n\n\n## IEEE-754 Floating Point\n\n\n## Danger in floating point numbers\nWhat's the result of $1+2^{-30}$ in floating representation?\n\n\n## Taxonomy of Representations","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-5":{"title":"ECE120 Lecture 5","content":"","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-6":{"title":"ECE120 Lecture 6","content":"","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-7":{"title":"ECE120 Lecture 7","content":"---\n## Program Analysis\nBeing able to read code is a necessary skill.\n\nIn the real world, codes are often poorly commented (few people are interested in commenting their codes). Therefore, it would be nice if we could interpret others' codes without comments.\n```c\n/* Adapted from V. Kindratenko's notes on 30 August 2016. */\n#include \u003cstdio.h\u003e /* needed for printf and scanf */\nint main()\n{\n int A;\n char B;\n int C;\n int D;\n printf (\"Enter two numbers separated by a character: \");\n if (3 != scanf (\"%d %c %d\", \u0026A, \u0026B, \u0026C)) {\n printf (\"Please try again.\\n\");\n /* Program failed. */\n return 3;\n }\n if ('+' == B) {\n D = A + C;\n } else if ('-' == B) {\n D = A - C;\n } else if ('/' == B) {\n D = A / C;\n } else if ('*' == B) {\n D = A * C;\n } else {\n printf (\"Invalid choice '%c'\\n\", B);\n /* Program failed. */\n return 2;\n }\n printf (\"answer: %d\\n\", D); \n /* End the program successfully. */\n return 0;\n}\n```\n\n## Testing Programs\nIn the world of programming, it's a wise choice to test your programs before true submission.\n__Brooks' Rule of Thumb__:\n- 1/3 planning and design \n- 1/6 writing the program \n- 1/2 testing\n\nIt's really no kidding. Programmers often make small mistakes in programming and it will take a long testing period to find out those mistakes.\n\n\n## Floating Points are Tricky!\nAs we have shown [[lecture_notes/ECE120/ECE120 Lecture 4#Danger in floating point numbers|before]], floating point numbers are tricky to handle.\nHere is an example in C Programming:\n\nSuppose we wish to find $\\int^{1}_{-1}{(x^{2}+2x+3)} \\mathrm{d}x$ by using C Programming.\nWe could use an approximation of [[Riemann Sum]]\n```c\n#include \u003cstdio.h\u003e\n\nint main()\n{\n int n = 100; /* hardcoded number of Riemann sum terms */\n float a = -1.0f; /* hardcoded [a,b] */\n float b = 1.0f;\n float s = 0.0f; /* computed integral value */\n int i; /* loop counter */\n float x; /* x and y=f(x) */\n float y;\n float dx = (b - a) / n; /* width of rectangles */\n /* Sum n rectangles. */\n for (i = 0; n \u003e i; i = i + 1) {\n /* x values are equally spaced from a to b. */\n x = a + dx * i;\n /* y values are f(x). */\n y = x * x + 2 * x + 3;\n /* Rectangle is y high and dx wide. */\n s = s + y * dx;\n }\n printf (\"%f\\n\", s);\n return 0;\n}\n```\nTheoretically, as ```n``` gets larger, the result will become more accurate.\n\nThis is also how things develop when $\\mathrm{n} \u003c 10^{6}$. \n\nHowever, when $\\mathrm{n}\u003e 10^{6}$ , things becomes wired.\n\nWhy? Note an important part of the code above\n```c\ns = s + y * dx;\n```\nAs ```n``` gets larger, ```y * dx``` gets smaller and smaller, and as we've already mentioned earlier, a super-large number adding a super-small number causes errors in floating point.\n\n## Bit-wise Calculation\nAs we have learnt previously in Boolean Operations, C supports multiple bit-wise operations. We can use this interesting property to do efficient truth table printing:\n```c\n#include \u003cstdint.h\u003e\n#include \u003cstdio.h\u003e\nint main ()\n{\n /*\n * The input variables A, B, and C are 8-bit unsigned values.\n * We use each bit to represent a possible combination of the\n * three variables.  Bit 7 of each is set to a 1, for example.\n * Bit 4 of A is set to 1, while bits 4 of B and C are set to 0.\n * In this way, we cover all entries of the truth table for\n * F(A,B,C).\n */\n uint8_t A = 0xF0; /* input variable A                   */\n uint8_t B = 0xCC; /* input variable B                   */\n uint8_t C = 0xAA; /* input variable C                   */\n uint8_t F; /* the function F                     */\n int32_t i; /* truth table row iteration variable */\n /*\n * Compute all possible values of function F using one statement.\n *    F(A,B,C) = (A+B)(A'+C')\n */\n F = ((A | B) \u0026 ((~A) | (~C)));\n /* Print a truth table for F. */\n printf (\"A B C | F\\n\");\n printf (\"","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-Lecture-8":{"title":"ECE120 Lecture 8","content":"---\n\n## MOSFET\n\nAll the digital electronics today use MOSFETs.\n\nThere're two kinds, named after the charge carrier.\n\n- n(egative)-type\n- p(ositive)-type\n\n![[lecture_notes/ECE120/images/Pasted image 20220415113217.png|300]]\n\nAn n-type MOSFET turns on if the Gate voltage exceeds threshold while the p-type do the opposite.\n\nWe only need two kinds of voltages to represent binary:\n\n- $0V$ , binary 0\n- $V_{dd}$ , binary 1\n\n## CMOS Logic Gate\nGates are mostly based on Complementary MOS (CMOS), which is the **complementary structure** of p-type and n-type MOSFETs.\n\n#### NOT Gate\n![[lecture_notes/ECE120/images/Pasted image 20220415113412.png]]\n#### NOR Gate\n![[lecture_notes/ECE120/images/Pasted image 20220415113358.png]]\n#### NAND Gate\n![[lecture_notes/ECE120/images/Pasted image 20220415113425.png]]\n\n## Optimization of Boolean Expressions\n\n### What's the best way to write F?\nSuppose we have:\n$$\nF = AB’C + ABC’ + ABC\n$$\nThe function $F$ can also be written in many other ways:\n$$\n\\begin{align*}\n\u0026F = AB + AC\\\\\n\u0026F = A (B + C)\\\\\n\u0026\\cdots\n\\end{align*}\n$$\nHow to determine the best way?\n\nAs a matter of fact, this is not a valid question. Because when evaluating a method, the metric is important. There're mainly 4 metrics used in logic gate construction.\n\n- area / size / cost\n- performance / speed\n- power / energy consumption\n- complexity / reliability\n\n### Area Heuristics\n1. Count literals (A, A’, B, B’, C, C’)\n2. Add the number of operations (not including complements for literals).\n\n### Delay(Speed) Heuristics\n- Find the maximum number of gates between any input and any output.\n\n### Power and Complexity\nThese two metrics are beyond our class’ scope. You’ll see power in ECE385.\n\nOne heuristic for power uses the fact that current flows when a transistor switches on/off and uses simulation to estimate the number of times that happens. \n\nComplexity is hard to measure, and is usually based on experience.\n\n### Answer the question above\n\n| From of $F$ | Lits | Ops | Area | Delay |\n|","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECE120/ECE120-MOC":{"title":"ECE120 MOC","content":"## Course Description\nECE120: Intro to Computing Systems is a UIUC course about the structure of computing systems.\n\n## Lecture Notes\n1. [[lecture_notes/ECE120/ECE120 Lecture 1|Lecture 1]]\n2. [[lecture_notes/ECE120/ECE120 Lecture 2|Lecture 2]]\n3. [[lecture_notes/ECE120/ECE120 Lecture 3|Lecture 3]]\n4. [[lecture_notes/ECE120/ECE120 Lecture 4|Lecture 4]]\n5. [[lecture_notes/ECE120/ECE120 Lecture 5|Lecture 5]]\n6. [[lecture_notes/ECE120/ECE120 Lecture 6|Lecture 6]]\n7. [[lecture_notes/ECE120/ECE120 Lecture 7|Lecture 7]]\n8. [[lecture_notes/ECE120/ECE120 Lecture 8|Lecture 8]]\n9. [[Lectures/ECE120/Lecture 9|Lecture 9]]\n10. [[Lectures/ECE120/Lecture 10|Lecture 10]]\n11. [[Lectures/ECE120/Lecture 11|Lecture 11]]\n12. [[Lectures/ECE120/Lecture 12|Lecture 12]]\n13. [[Lectures/ECE120/Lecture 13|Lecture 13]]\n14. [[lecture_notes/ECE120/ECE120 Lecture 14|Lecture 14]]\n15. [[lecture_notes/ECE120/ECE120 Lecture 15|Lecture 15]]\n16. [[lecture_notes/ECE120/ECE120 Lecture 16|Lecture 16]]\n17. [[lecture_notes/ECE120/ECE120 Lecture 17|Lecture 17]]\n18. [[lecture_notes/ECE120/ECE120 Lecture 18|Lecture 18]]\n19. [[lecture_notes/ECE120/ECE120 Lecture 19|Lecture 19]]\n20. [[lecture_notes/ECE120/ECE120 Lecture 20|Lecture 20]]\n21. [[lecture_notes/ECE120/ECE120 Lecture 21|Lecture 21]]\n22. [[Lecture 22]]\n23. [[Lecture 23]]\n24. [[lecture_notes/ECE120/ECE120 Lecture 24|Lecture 24]]\n25. [[lecture_notes/ECE120/ECE120 Lecture 25|Lecture 25]]\n26. [[lecture_notes/ECE120/ECE120 Lecture 26|Lecture 26]]\n27. [[lecture_notes/ECE120/ECE120 Lecture 27|Lecture 27]]\n28. [[lecture_notes/ECE120/ECE120 Lecture 28|Lecture 28]]\n29. [[lecture_notes/ECE120/ECE120 Lecture 29|Lecture 29]]\n30. [[lecture_notes/ECE120/ECE120 Lecture 30|Lecture 30]]\n31. [[Lecture 31]]\n32. [[lecture_notes/ECE120/ECE120 Lecture 32|Lecture 32]]\n\n## Lab Notes\n1. [[Lab 1]]\n2. [[Lab 2]]\n3. [[Lab 3]]\n\n## Homework Notes","lastmodified":"2022-05-22T08:35:16.226579809Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-1":{"title":"ECON102 Lecture 1","content":"","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-12":{"title":"ECON102 Lecture 12 - Monopoly","content":"## Why Monopoly Arises\n\n\n## \n![[Excalidraw/Drawing 2022-05-06 14.13.30.excalidraw]]","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-13":{"title":"ECON102 Lecture 13","content":"## Market Concentration and Oligopoly\n### Market Concentration\n**Concentration ratio** is the  percentage of total output in the market supplied by the four largest firms. The higher the concentration ratio, the less competition.\n\n### Oligopoly\nOligopoly is market structure in which only a few sellers offer similar or identical products. i.e. high concentration ratios.\n\nStrategic behavior in oligopoly:\n- A firm’s decisions about P or Q can affect other firms and cause them to react \n- The firm will consider these reactions when making decisions\n\nThe study of how people behave in strategic situations leads to **game theory**.\n\n##","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-2":{"title":"ECON102 Lecture 2","content":"","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-3":{"title":"ECON102 Lecture 3","content":"","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-4":{"title":"ECON102 Lecture 4","content":"","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-5":{"title":"ECON102 Lecture 5","content":"","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-6":{"title":"ECON102 Lecture 6","content":"","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-7":{"title":"ECON102 Lecture 7 - Trade","content":"---\n\n## Production Possibilities Curve\n**Production possibilities curve (PPC)** shows the relationship between the maximum production of one good for a given level of production of another good.\n\nBelow is an example of PPC between computer programs and websites for a person.\n![[lecture_notes/ECON102/images/Pasted image 20220414180225.png]]\n\n### Opportunity Cost on PPC\n$$\n\\text{Opportunity Cost}_{\\text{Websites}}=\\frac{\\text{Loss in computer programs}}{\\text{Gain in Websites}}\n$$\n## Reasons behind Trade\n### Comparative Advantage\nLook at the PPC of two persons below:\n![[lecture_notes/ECON102/images/Pasted image 20220414180740.png]]\n\nIf we calculate the opportunity costs of two persons\n\n| Individual | Website opportunity cost | Computer program opportunity cost |\n|","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-Lecture-8":{"title":"ECON102 Lecture 8 - Externalities","content":"## Market Failures: Externalities\nThere are important cases in which free markets fail to maximize social surplus. We call such cases market failures. One of them is externality.\n\n**Externality** is the uncompensated impact of one person’s actions on the well-being of a bystander. _e.g._ smoking in public places without considering impact on others.\n\nMarket is **NOT** efficient when there are externalities. Because self-interested buyers and sellers neglect the external effects of their actions.\n\n### Negative Externalities\n**Negative externality** is when the effect on bystanders is adverse.\n\n#### Air Pollution\nThe firm does not bear the full cost of its production, and so will produce more than the socially efficient quantity.\n\n#### Other Examples\n1. Your neighbor’s barking dog \n2. Late-night loud video games noises from the dorm room next to yours \n3. Noise pollution from construction projects near your house \n4. Talking on cell phone while driving makes the roads less safe for others \n5. Health risk to others from second-hand smoke\n\n### Positive Externalities\n**Positive Externality** is when the effect on bystanders is beneficial.\n\n#### Benefit of Education\nA more educated population benefits society: \n- lower crime rates: educated people have more opportunities, so less likely to rob and steal\n- better government: educated people make better-informed voters\n\nHowever, people do not consider these external benefits when deciding how much education to “purchase”, so the market equilibrium education is low.\n\n#### Other Examples\n1. Being vaccinated against contagious diseases protects not only you, but people who visit the restaurants or cinemas \n2. R\u0026D creates knowledge others can use\n\n### Example: Gasoline Market\nIn the market of gasoline, there is additional cost to the society, or externalities in the gasoline transaction. These factors are not considered in previous analysis, so how to add them to our analysis?\n\n#### Analysis of Negative Externalities\nIf taken the factors of externalities into account, the cost of society should also be considered, shifting the cost curve (supply curve) upward.\n![[lecture_notes/ECON102/images/Pasted image 20220415132333.png]]\n\nTherefore, we'll find that\n$$\nQ_{\\text{private}}\u003eQ_{\\text{social}}\n$$\n![[lecture_notes/ECON102/images/Pasted image 20220415132423.png]]\n\n#### Internalizing the Externality\nOne fundamental theme unites the multiple solutions to externalities, is try to let economic agents **internalizing** the externality, meaning individuals or companies take into account the full costs and benefits of their actions because of some public or private incentive.\n\nWhen the external effects of their actions are internalized, the general result is that the market equilibrium moves toward higher social well-being.\n\n#### Pigou Taxes\nSuppose we impose a 1 per gallon tax on gasoline. The 1/gallon tax on sellers makes sellers’ costs equal to social costs. When market participants must pay social costs, the market equilibrium matches the social optimum.\n\nSuch taxes are called **Pigou taxes**.\n\n#### Analysis of Positive Externality\nSimilarly, we can find the effect of positive externality on the market.\n![[lecture_notes/ECON102/images/Pasted image 20220415134321.png]]\n\nWe'll find that\n$$\nQ_{\\text{private}}\u003cQ_{\\text{social}}\n$$\n\n## Private Solution to Externalities\nConsider the scenario of a power plant that is currently emitting tons of toxins in waterways, which adversely affects local fishermen.\n\nSay you discover the power plant can eliminate the toxins that it emits by purchasing and installing scrubbers (a technology that cleans water and air before they are released into the ecosystem). But scrubbers are expensive to purchase and maintain, approximately 5 million.\n\nThe fishermen conclude that if they can convince the power plant to install the scrubbers, they will receive benefits over the next decade of approximately 7 million.\n\n### Case 1: The power plant has the right to pollute\nBecause the power plant holds the right to pollute by law, it does not have to install expensive equipment.\n\nBut it doesn't mean that the pollution will continue. As a matter of fact, if the power plant and the fishermen negotiate, it's possible that they will form a trade. The fishermen transfer more than 5 million and less than 7 million to the power plant in exchange of installtion of scrubbers.\n\n### Case 2: The power plant does not have the right to pollute\nNow let’s consider when the opposite case is at work: upon looking into the local ordinances, say that you, the mayor, had found a law against the power plant polluting the waterways. You would have then informed the power plant that it was out of compliance. If it chose at that point not to shut down, it would then have installed the scrubbers, thereby eliminating the water pollution.\n\n### Conclusion: The Coase Theorem\nThe remarkable bottom line is that regardless of whether the law permits the power plant to pollute or not, the economically efficient outcome is achieved either way.\n\n**The Coase theorem**: If private parties can bargain **without cost** over the allocation of resources, they can solve the externalities problem on their own.\n\n### Example: The Fable of the Bees\nIn the literature of economics, the standard example of a positive externality is the interaction between apple growing and beekeeping.\n\nPeople who believe Pigou would have argued that this situation must result in suboptimal levels of output in both activities. \n- An apple grower stops planting new trees as soon as the marginal cost of planting exceeds his private marginal benefit, failing to consider that further trees would benefit his neighbor. \n- The beekeeper performs a similar unfortunate calculation.\n\nCheung investigated the accuracy of this fable by interviewing apple growers and beekeepers\n\nHe found that, contrary to the expectations of Pigou-style economists and exactly as Coase would have predicted, there is an elaborate system of contracts under which the two groups reimburse each other with ”bribes” for increasing output to the socially optimal levels.\n\n### Example: Keeping a Dog\n#### CASE 1\n- Dick has the legal right to keep Spot \n- Benefit to Dick of having Spot = 500\n- Cost to Jane of Spot’s barking = 800 \n\nSocially efficient outcome: Spot goes bye-bye. \n\nPrivate outcome: Jane pays Dick 600 to get rid of Spot, both Jane and Dick are better off. \n\nPrivate outcome = Efficient outcome.\n\n#### CASE 2\n- Dick has the legal right to keep Spot \n- Benefit to Dick of having Spot = 1000\n- Cost to Jane of Spot’s barking = 800 \n\nSocially efficient outcome: See Spot stay.\n\nPrivate outcome: Jane not willing to pay more than 800, Dick not willing to accept less than 1000, so Spot stays.\n\nPrivate outcome = Efficient outcome.\n\n#### CASE 3\n- Benefit to Dick of having Spot = 1000\n- Cost to Jane of Spot’s barking = 800 \n- But Jane has the legal right to peace and quiet. \n\nSocially efficient outcome: Dick keeps Spot. \n\nPrivate outcome: Dick pays Jane 900 to put up with Spot’s barking. \n\nPrivate outcome = Efficient outcome.\n\n### Why Private Solutions Do Not Always Work\n1. Transaction costs: the costs that parties incur in the process of agreeing to and following through on a bargain\n2. Sometimes, even when a beneficial agreement is possible, each party may hold out for a better deal.\n3. Coordination problems \u0026 costs when the number of parties is large.\n\n## Public Policies to Externalities\nSince private solutions might not work, we need introduction of public policies to solve externalities.\n\nAcme and US Electric are two electricity company which run coal burning power plants. Each emits 40 tons of sulfur dioxide per month. SO2 causes acid rain \u0026 other health issues. \n\nPolicy goal: reducing SO2 emissions 25%\n\nSuppose cost of reducing emissions is lower for Acme than for US Electric. So the socially efficient outcome is Acme reduces emissions more than US Electric.\n\n### Command-and-control policies\nDirect regulation is very simple, simply regulating the amount of emission by requiring each plant to cut emissions by 25%.\n\nYou can see that the outcome is not socially efficient because they all reduce the same amount of emissions.\n\n### Market-Based Policy 1: Corrective Taxes \u0026 Subsidies\n**Corrective tax** is a tax designed to induce private decision-makers to take account of the social costs that arise from a negative externality.\n\nFrom the perspective of producers, if they pollute one unit of SO2, they need to pay the tax. So, the corrective tax is simply a ”price” on the right to pollute. Like other prices, the tax allocates this ”good” to the firms who value it most highly (US Electric), which is more efficient than direct command control.\n\n### Market-Based Policy 2: Tradable Pollution Permits\n**Tradable pollution permits** is the permitted amount of pollution assigned to all the firms but allows trade between firms.\n\nDue to the presence of trade, \n- Firms with low cost of reducing pollution sell whatever permits they can.\n- Firms with high cost of reducing pollution buy permits.\n\nTherefore, it's also a more efficient method compared with direct command policy.","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ECON102/ECON102-MOC":{"title":"ECON102 MOC","content":"## Course Description\nECON102: Microeconomics Principles\n\n## Lecture Notes\n1. [[lecture_notes/ECON102/ECON102 Lecture 1|Lecture 1 - Introduction]]\n2. [[lecture_notes/ECON102/ECON102 Lecture 2|Lecture 2 - Optimization \u0026 Demand \u0026 Supply]]\n3. [[lecture_notes/ECON102/ECON102 Lecture 3|Lecture 3 - Consumer Side]]\n4. [[lecture_notes/ECON102/ECON102 Lecture 4|Lecture 4 - ]]\n5. [[lecture_notes/ECON102/ECON102 Lecture 5|Lecture 5]]\n6. [[lecture_notes/ECON102/ECON102 Lecture 6|Lecture 6]]\n7. [[lecture_notes/ECON102/ECON102 Lecture 7|Lecture 7 - Trade]]\n8. [[lecture_notes/ECON102/ECON102 Lecture 8|Lecture 8- Externalities]]\n9. [[lecture_notes/ECON102/ECON102 Lecture 12|Lecture 12]]","lastmodified":"2022-05-22T08:35:16.238579837Z","tags":null},"/lecture_notes/ML_seminars/ML-Seminar-2022.4.16":{"title":"ML Seminar 2022.4.16","content":"## Group Activity Recognition\nPredicting group activity.\n\n- Input: RGB and optical flow\n- Output: Group Activity Label\n- Label: Bounding Box and individual actions\n\nSettings of Dataset:\n- Full Setting: Group activity + Individual annotations\n- Weakly Supervised Setting: Only Group activity\n\n## Repetitive Action Counting\nFrom video/audio to count repetitive actions.\n\n- Input: RGB and audio\n- Output: Counting Prediction\n\nSettings of Dataset:\n- RGB\n- RGB+Audio\n\n## Video Highlight Detection\nPredicting highlights in a video.\n\n- Input: Videos (and user interactions)\n- Output: frame-level importance score\n\n## Personalized Video Summarization\nSummarizing a video with importance scores.\n\n- Input: Video, GT importance scores\n- Output: Summarizated frames\n\n## Video Moment Localization\nLocalizing a specific moment described by a natural language query.\n\n- Input: Video and Text\n- Output: temporary segment with a start and end timestamps","lastmodified":"2022-05-22T08:35:16.242579847Z","tags":null},"/lecture_notes/ML_seminars/ML-Seminar-2022.4.22":{"title":"ML Seminar 2022.4.22","content":"## Representation Matters\nThe way how data represented is crucial to machine learning.\n\n![[lecture_notes/ML_seminars/images/Pasted image 20220422224849.png]]\n\nAbove is an example of how transforming from Cartesian coordinate to Polar corrdinate helps improving performance of Logistic Regression networks.\n\nOf course, increasing model complexity also might achieve a good classification.\n\nWhen the Logistic Regression is replaced with a MLP, the performance greatly increases.\n![[lecture_notes/ML_seminars/images/Pasted image 20220422225219.png]]\nSee the code for this example at [code](https://jnxc1234567890.github.io/lecture_notes/ML_seminars/rep_example.py).","lastmodified":"2022-05-22T08:35:16.242579847Z","tags":null},"/wikipages/AI-Bias":{"title":"AI Bias","content":"## Sources of AI Bias\n### Data\n### People\n### Algorithm","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Artificial-Intelligence":{"title":"Artificial Intelligence","content":"[[wikipages/AI Bias]]","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Calculus":{"title":"Calculus","content":"## Courses\n1. [[MATH221]]\n2. [[MATH231 MOC|MATH231]]\n3. MATH241\n\n## Books\n1. [[Calculus - James Stewart|Calculus - James Stewart]]\n\n## Wiki of Calculus\n- Single Variable Calculus\n\t- Differential Calculus\n\t\t- [Limits](wikipages/Limits.md)\n\t\t- [Derivatives](wikipages/Derivatives.md)\n\t\t- [Rules of Differentiation](wikipages/Rules%20of%20Differentiation.md)\n\t\t- Applications of Differentiation\n\t- Integral Calculus\n\t\t- [Integrals](wikipages/Integrals.md)\n\t\t- [Techniques of Integration](wikipages/Techniques%20of%20Integration.md)\n\t\t- Applications of Integration\n\t- Sequence and Series\n\t\t- [Infinite Sequence and Series](wikipages/Infinite%20Sequence%20and%20Series.md)\n\t\t- [[wikipages/Series Convergence Tests|Series Convergence Tests]]\n\t\t- [[wikipages/Series Estimation|Series Estimation]]\n\t\t- [[wikipages/Taylor Series|Taylor Series]]\n\t- Parametric Equations\n\t\t- [[wikipages/Calculus in Parametric Curves|Parametric Curves]]\n\t\t- [[wikipages/Polar Coordinates|Polar Coordinates]]\n- Multi Variable Calculus\n\t-","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Calculus-in-Parametric-Curves":{"title":"Untitled Page","content":"## Tangent in Parametric Curves\nFrom Chain Rule, we have:\n$$\n\\frac{ dy }{ dt } =\\frac{ dy }{ dx } \\frac{ dx }{ dt } \n$$\nIf $dx/dt\\neq 0$, we have\n\u003e**THEOREM**:\n\u003eThe derivative can be given by:\n\u003e$$\n\\begin{align*}\n\\frac{ dy }{ dx } =\\frac{\\displaystyle\\frac{ dy }{ dt }}{\\displaystyle\\frac{ dx }{ dt } }\u0026\u0026\\text{if }\\frac{ dx }{ dt } \\neq 0 \\tag{1}\n\\end{align*}$$\n\nIt's also easy to observe that when $\\frac{ dx }{ dt } =0$, the curve has a vertical tangent. When $\\frac{ dy }{ dt } =0$, it has a horizontal tangent.\n\n\u003e**THEOREM**:\n\u003eThe second derivative can be given by:\n\u003e$$\n\\frac{ d^{2}y }{ dx^{2} } =\\frac{d}{dx} \\left( \\frac{ dy }{ dx }  \\right)=\\frac{\\displaystyle\\frac{d}{dt} \\left( \\frac{ dy }{ dx }  \\right)}{\\displaystyle\\frac{ dx }{ dt } }$$\n\n## Areas in Parametric Curves\nThe area under a curve $y=F(x)$ from $a$ to $b$ is $A=\\int ^b_{a}F(x) \\, dx$.\n\n\u003e**THEOREM**:\n\u003eIf $x=f(x)$ and $y=g(t)$, the area under the curve $y=F(x)$ is given by:\n\u003e$$\nA=\\int ^b_{a}y \\, dx=\\int ^\\beta_{\\alpha}g(t)f'(t) \\, dt  $$\n\n## Arc Length in Parametric Curves\nThe arc length of a curve $y=F(x)$ in an interval $a\\leq x\\leq b$ is $L=\\int ^b_a\\sqrt{ 1+\\left( \\frac{ dy }{ dx }  \\right)^2 } \\, dx$ if $F'$ is continuous.\n\nUsing (1) to replace $\\frac{dy}{dx}$, we get\n\u003e**THEOREM**:\n\u003eIf a curve $C$ is described by the parametric equations $x=f(t),y=g(t) ,\\alpha\\leq t\\leq \\beta$, where $f'$ and $g'$ are continuous on $[\\alpha,\\beta]$ and $C$ is traversed exactly once as $t$ increases from $\\alpha$ to $\\beta$, then the length of $C$ is\n\u003e$$\n\\begin{align*}\nL\u0026=\\int ^b_{a}\\sqrt{ 1+\\left( \\frac{ dy }{ dx }  \\right)^2 } \\, dx=\\int _{\\alpha}^\\beta \\sqrt{ 1+\\left( \\frac{\\frac{dy}{dt}}{\\frac{dx}{dt}} \\right)^2 } \\frac{dx}{dt} \\, dt\\\\\n\u0026=\\int _{\\alpha}^\\beta \\sqrt{ \\left( \\frac{ dx }{ dt }  \\right)^2+\\left( \\frac{ dy }{ dt }  \\right)^2 } \\, dt \\tag{4}\n\\end{align*}$$\n\nNote that even if $y=F(x)$ is not a function, (4) still holds because the equation can also be derived from polygonal approximation.\n\n## Surface Area of Revolution in Parametric Curves\nSimilar to arc length, we can also have a parametric version of surface area of revolution.\n\n\u003e**THEOREM**:\n\u003eIf a curve $C$ is described by the parametric equations\n\u003e$x=f(t),y=g(t),\\alpha\\leq t\\leq \\beta$, where ","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Computer-Architecture":{"title":"Computer Architecture","content":"## Courses\n1. [[lecture_notes/ECE120/ECE120 MOC|ECE120 MOC]]\n\n## Books\n1. Intro to Computing Systems - Patt\n\n## Wiki of Computer Architecture","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Derivatives":{"title":"Derivatives","content":"","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Differential-Equations":{"title":"Differential Equations","content":"## Courses\n1. [[MATH286]]\n## Books\n\n## Wiki of Differential Equations","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Economics":{"title":"Economics","content":"## Courses\n1. [[lecture_notes/ECON102/ECON102 MOC|ECON102 MOC]]\n\n## Books\n\n## Wiki of Economics","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Infinite-Sequence-and-Series":{"title":"Infinite Sequence and Series","content":"## Sequence\nAn infinite sequence is a list of numbers in a definite order. Rigorously speaking, an infinite sequence is a function $f : \\mathbb{N}\\to\\mathbb{R}$. Thus its definition of limit is the same as function's limit and theorems concerning functions apply to it as well (e.g. The Squeeze Theorem).\n\n\u003e **NOTATION**:\n\u003e A sequence is usually denoted by:\n\u003e $$\n\\begin{align*}\n\u0026\\{ a_{1},a_{2},\\dots \\}\u0026\\text{or}\u0026\u0026\\{ a_{n} \\} \u0026\u0026\\text{or}\u0026\u0026 \\{ a_{n} \\}^{\\infty}_{n=1}\n\\end{align*}$$\n\n### Convergence of Sequence\n\n\u003e**DEFINITION**:\n\u003eA sequence $\\{ a_{n} \\}$ is said to be **convergent** if and only if\n\u003e$$\n\\lim_{ n \\to \\infty } a_{n} = L$$\n\u003eIn other cases, we say the sequence **diverges**.\n\n### Absolute Value and Convergence to 0\n\u003e**THEOREM**:\n\u003e$$\n\\begin{align*}\n\\lim_{ n \\to \\infty } \\left| a_{n} \\right| =0 \\implies \\lim_{ n \\to \\infty } a_{n}=0\\tag{1}\n\\end{align*}$$\n\n**PROOF**:\nConsider $b_{n}=\\left| a_n \\right|,\\ c_{n}=-\\left| a_n \\right|$.\nClearly,\n$$\nc_{n}\\leq a_{n}\\leq b_{n},\\lim_{ n \\to \\infty } c_{n}=-\\lim_{ n \\to \\infty } b_{n}=0=\\lim_{ n \\to \\infty } b_{n}\n$$\nBy [[The Squeeze Theorem]],\n$$\n\\lim_{ n \\to \\infty } a_{n}=\\lim_{ n \\to \\infty } c_{n}=\\lim_{ n \\to \\infty } b_{n} = 0\n$$\n### Convergence of $\\{ r^{n} \\}$\nWith some simple calculation, we'll find:\n\u003e**Example**:\n\u003eThe sequence $\\{ r^n \\}$ is convergent if $-1\u003cr\\leq 1$ and divergent for all other values of $r$.\n\u003ei.e.\n\u003e$$\n\\lim_{ n \\to \\infty } r^{n} = \\begin{cases}\n0 \u0026\\text{ if }\u0026-1\u003cr\u003c1 \\\\\n1 \u0026\\text{ if }\u0026r=1\n\\end{cases}$$\n\n### Bounded Sequence\n\u003e **DEFINITION**:\n\u003e A sequence $\\{ a_{n} \\}$ is **bounded above** if there is a  number $M$ such that\n\u003e $$\n\\begin{align*}\n\u0026a_{n}\\leq M \u0026\\text{for all }n\\geq 1 \\\\\n\\end{align*}$$\n\u003eIt's bounded below if there is a number $m$ such that\n\u003e$$\n\\begin{align*}\n\u0026a_{n}\\geq  m \u0026\\text{for all }n\\geq 1 \\\\\n\\end{align*}$$\n\u003eIf it's bounded both above and below, it's a **bounded sequence**.\n\n### Monotonic Sequence Theorem\n\u003e**THEOREM**:\n\u003e$$\n\\begin{align*}\n\\text{Every bounded, monotonic sequence is convergent.}\\tag{2}\n\\end{align*}$$\n\n## Series\nAn infinite series is the sum of all terms in an infinite sequence.\n\n\u003e**NOTATION**:\n\u003eThe usual notation for series is Sigma Notation:\n\u003e$$\n\\begin{align*}\n\u0026\\sum^\\infty_{n=1}a_{n} \u0026\u0026 \\text{or} \u0026\u0026 \\sum a_{n}\n\\end{align*}$$\n\n\n### Partial Sum and Convergence of Series\n\u003e**DEFINITION**:\n\u003eThe **partial sum** of a series $\\sum a_{n}$ is defined by:\n\u003e$$\ns_{n}=\\sum^n_{i=1}a_{i}$$\n\u003eIf $\\{ s_{n} \\}$ is convergent, i.e. $\\lim_{ n \\to \\infty } s_{n}=s$, the series $\\sum a_{n}$ is called **convergent** and we have\n\u003e$$\n\\sum^\\infty_{n=1}a_{n}=s$$\n\u003eIf $\\{ s_{n} \\}$ is divergent, the series is divergent.\n\n### Geometric Series\n\u003e**Example**:\n\u003eThe **geometric series**\n\u003e$$\n\\sum^\\infty_{n=1}ar^{n-1}=a+ar+ar^2+\\dots $$\n\u003eis convergent if and only if $\\left| r \\right| \u003c1$ and and its sum is\n\u003e$$\n\\sum^\\infty_{n=1}ar^{n-1}=\\frac{a}{1-r}$$\n\n### Harmonic Series\n\u003e**Example**:\n\u003eThe **harmonic series**\n\u003e$$\n\\sum^\\infty_{n=1} \\frac{1}{n}=1+\\frac{1}{2}+\\frac{1}{3}+\\dots $$\n\u003eis divergent.\n\n**PROOF**:\nPlease reference the [Wikipedia page](https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)) for more.\n\n### Test for Divergence\n\u003e**THEOREM**:\n\u003e$$\n\\begin{align*}\n\\sum^\\infty_{n=1}a_{n}=s \\implies \\lim_{ n \\to \\infty } a_{n}=0\\tag{3}\n\\end{align*}$$\n\n**PROOF**:\nAssume $s_{n}=\\sum^n_{i=1}a_{i}$, then $a_{n}=s_{n}-s_{n-1}$.\nWe have:\n$$\n\\lim_{ n \\to \\infty } a_{n}=\\lim_{ n \\to \\infty } (s_{n}-s_{n-1})=\\lim_{ n \\to \\infty } s_{n}-\\lim_{ n \\to \\infty } s_{n-1}=s-s=0\n$$\n\nThe contrapositive of [[wikipages/Infinite Sequence and Series#Test for Divergence|(3)]] is called **test for divergence**.\n\n\u003e**THEOREM** (*Test for Divergence*):\n\u003e$$\n\\begin{align*}\n\\lim_{ n \\to \\infty } a_{n}\\neq 0 \\text{ or DNE}\\tag{4} \\implies \\sum^\\infty_{n=1}a_{n}\\text{ is divergent}\n\\end{align*}$$\n\n### Absolute Convergence\n\u003e**DEFINITION**:\n\u003eA series $\\sum a_{n}$ is called **absolutely convergent** if $\\sum |a_{n}|$ is convergent.\n\u003eIf $\\sum a_{n}$ is convergent and $\\sum |a_{n}|$  is divergent we call the series **conditionally convergent**.\n\nSimilar to sequence [[wikipages/Infinite Sequence and Series#Absolute Value and Convergence to 0|above]], the absolute value of  series also implies somthing about convergence.\n\u003e**THEOREM**:\n\u003e$$\n\\begin{align*}\n\\sum \\left| a_{n} \\right| \\text{ is convergent}\\implies \\sum  a_{n}  \\text{ is convergent}\\tag{5}\n\\end{align*}$$\n\n**PROOF**:\nObviously, we could have:\n$$\n0\\leq a_{n}+\\left| a_{n} \\right| \\leq 2|a_{n}|\n$$\nAccording to [[wikipages/Series Convergence Tests#Comparison Test and Limit Comparison Test|Comparison Test]],\n$$\n\\sum 2|a_{n}| \\text{ is convergent}\\implies \\sum (a_{n}+|a_{n}|) \\text{ is convergent}\n$$\nNotice that\n$$\\sum a_{n}=\\sum (a_{n}+|a_{n}|)-|a_{n}|=\\sum (a_{n}+|a_{n}|)-\\sum |a_{n}|$$\n$\\sum a_{n}$ is the difference of two convergent series therefore converges.","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Integrals":{"title":"Integrals","content":"## Definition of Definite Integral\n\u003e**DEFINITION**:\n\u003eIf $f$ is a function defined for $a\u003cx\u003cb$, we divide the interval $[a,b]$ into $n$ subintervals of euqal width $\\Delta x=(b-a)/n$.\n\u003eWe let $x_0(=a),x_1,x_2,\\cdots,x_n(=b)$ be the endpoints of these subintervals and we let $x_1^*,x_2^*,\\cdots,x_n^*$ be any sample points in these subintervals, meaning $x_i^*$ lies in the $i$th subinterval $[x_{i-1},x_i]$.\n\u003eThen the **definite integral** of $f$ from $a$ to $b$ is\n\u003e$$\n\\int^{b}_{a} f(x) \\, dx=\\lim_{ n \\to \\infty } \\sum^\\infty_{i=1}f(x_{i}^*)\\Delta x $$\n\u003eprovided that this limit exists and gives the same value for all possible choices of sample points.\n\u003eIf it does exist we say that $f$ is integrable on $[a,b]$.\n\n## The Fundamental Theorem of Calculus\n\u003e**THEOREM** (*The Fundamental Theorem of Calculus*):\n\u003e**Part I**: If $f$ is continous on $[a,b]$, then the function $g$ defined by\n\u003e$$\n\\begin{align*}\n\u0026g(x)=\\int ^x_{a}f(t) \\, dt \u0026\u0026a\\leq x\\leq b\n\\end{align*}$$\n\u003eis continous on $[a,b]$ and differentiable on $(a,b)$, and $g'(x)=f(x)$.\n\u003e**Part II**: If $f$ is continous on $[a,b]$, then\n\u003e$$\n\\int ^b_{a}f(x) \\, dx=F(b)-F(a) $$\n\u003ewhere $F$ is any antiderivative of $f$, i.e. $F'(x)=f(x)$.\n\n## Definition of Indefinite Integral\n\u003e**DEFINITION**:\n\u003eThe **indefinite integral** of a function $f$ is the notation for the *antiderivative* of $f$.\n\u003eThus:\n\u003e$$F(x)=\\int f(x) \\, dx \\iff F'(x)=f(x)$$\n\n## Improper Integral\n### How improper integral happens?\nRecall the definition of [[wikipages/Integrals#Definition of Definite Integral|definite integrals]]. There're some cases that make a definite integral incomputable:\n1. The first case is when $a$ or $b$ becomes an infinite number. e.g. $\\int^{\\infty}_{a}f(x)\\mathrm{d}x$\n2. The second case is when there is a point $x_{0}\\in[a,b]$ that $f(x_{0})$ is not integrable. e.g. $\\int^{1}_{0}\\frac{1}{x-0.5}\\mathrm{d}x$.\n\n### Types of Improper Integrals\n#### Type I: Infinite Integrals\n##### Case 1: $\\int^{\\infty}_{a}f(x)\\mathrm{d}x$\n$$\n\\begin{align*}\n\\int^{\\infty}_{a}f(x)\\mathrm{d}x \u0026= \\lim_{t\\to\\infty} \\int^{t}_{a}f(x)\\mathrm{d}x\n\\end{align*}\n$$\n##### Case 2: $\\int^{b}_{-\\infty}f(x)\\mathrm{d}x$\n$$\n\\int^{b}_{-\\infty}f(x)\\mathrm{d}x=\\lim_{t\\to- \\infty}\\int^{b}_{t}f(x)\\mathrm{d}x\n$$\n##### Case 3: $\\int^{\\infty}_{-\\infty}f(x)\\mathrm{d}x$\n$$\n\\begin{align*}\n\u0026\\int^{\\infty}_{-\\infty}f(x)\\mathrm{d}x=\\int^{a}_{-\\infty}f(x)\\mathrm{d}x+\\int^{\\infty}_{a}f(x)\\mathrm{d}x\\\\\n\u0026\\mathrm{The\\ left\\ integral\\ converges\\ if\\ all\\ right\\ integrals\\ converge.}\n\\end{align*}\n$$\n\n#### Type II: Discontinuous Integral\n##### Case 1: $f$ is continuous on $\\left[a,b\\right)$ and discontinuous at $b$\n$$\n\\int^{b}_{a}{f(x)\\mathrm{d}x}=\\lim_{t\\to b^{-}}{\\int^{t}_{a}}{f(x)\\mathrm{d}x}\n$$\n\n##### Case 2: $f$ is continuous on $(a,b]$ and discontinuous at $a$\n$$\n\\int^{b}_{a}{f(x)\\mathrm{d}x}=\\lim_{t\\to a^{+}}{\\int^{b}_{t}}{f(x)\\mathrm{d}x}\n$$\n\n##### Case 3: $f$ has discontinuity at $c$ and $c \\in (a,b)$\n$$\n\\int^{b}_{a}{f(x)\\mathrm{d}x}=\\int^{c}_{a}{f(x)\\mathrm{d}x}+\\int^{b}_{c}{f(x)\\mathrm{d}x}\n$$","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Limits":{"title":"Limits","content":"","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Linear-Algebra":{"title":"Linear Algebra","content":"## Courses\n\n## Books\n\n## Wiki of Linear Algebra","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Polar-Coordinates":{"title":"Polar Coordinates","content":"## Polar Coordinates\n\u003e**DEFINITION**:\n\u003eWe choose a point in the plane that is called the **pole** (or origin) and is labeled $O$. Then we draw a ray (half-line) starting at $O$ called the **polar axis**.\n\u003eIf $P$ is any other point in the plane, let $r$ be the distance from $O$ to $P$ and let $\\theta$ be the angle (usually measured in radians) between the polar axis and the line $OP$.\n\u003eThe point $P$ is represented by the ordered  pair $(r,\\theta)$,called **polar coordinates** of P.\n\n## Transformation of Polar and Cartesian Coordinates\n\u003e**THEOREM**:\n\u003eSuppose a polar coordinate $(r,\\theta)$ and a Cartesian coordinate $(x,y)$ have the same origin (pole) and the polar axis is the x-axis.\n\u003eThen the transformation from polar coordinates to Cartesian coordinates is:\n\u003e$$\n\\begin{align*}\nx=r\\cos\\theta\u0026\u0026y=r\\sin\\theta\\tag{1}\n\\end{align*}$$\n\u003eThe transformation from Cartesian coordinates to polar coordinates is:\n\u003e$$\n\\begin{align*}\nr^2=x^2+y^2 \u0026\u0026\\tan\\theta= \\frac{y}{x}\\tag{2}\n\\end{align*}$$\n\u003eRemind that the two equations give four $(r,\\theta)$ but only two of them are valid.\n\n## Symmetry of Polar Curves\nSuppose we have a polar curve equation $F(r,\\theta)=0$.\n\n1. If $F(r,-\\theta)=0$ or $F(-r,\\pi-\\theta)=0$, the curve is symmetric about the polar axis.\n2. If $F(-r,\\theta)=0$ or $F(r,\\theta+\\pi)=0$, the curve is symmetric about the pole.\n3. If $F(r,\\pi-\\theta)=0$ or $F(-r,-\\theta)=0$, the curve is symmetric about the vertical line $\\theta=\\frac{\\pi}{2}$.\n\n## Tangents to Polar Curves\n\u003e**THEOREM**:\n\u003eThe tangent to a point $P$ in a polar curve is given by:\n\u003e$$\n\\frac{dy}{dx}=\\frac{\\frac{dy}{d\\theta}}{\\frac{dx}{d\\theta}}=\\frac{ \\frac{dr}{d\\theta}\\sin\\theta+r\\cos\\theta }{\\frac{dr}{d\\theta}\\cos\\theta-r\\sin\\theta}$$\n\n## Area in Polar Curves\nRemind we have the following formula for the area of a sector\n$$\nA=\\frac{1}{2}r^2\\theta\n$$\nTherefore, by applying the concept of [[wikipages/Integrals#Definition of Definite Integral|Riemann Sum]], we have\n$$\nA=\\lim_{ n \\to \\infty } \\frac{1}{2}[f(\\theta^*_{i})]^2\\Delta\\theta=\\int ^b_{a}\\frac{1}{2}[f(\\theta)]^2 \\, d\\theta \n$$\n\u003e**THEOREM**:\n\u003eFor $a\u003c\\theta\u003cb$, the area bounded by the polar equation $r=f(\\theta)$ is\n\u003e$$\nA=\\int _{a}^b \\frac{1}{2}r^2 \\, d\\theta $$\n\n## Arc Length in Polar Curves\nIntuitively, the difference of arc length of a given polar curve for an infinitely small segment $\\Delta\\theta$ should be $\\sqrt{ (r\\Delta\\theta)^2+\\Delta r^2 }$. Therefore, we will have:\n$$\nL=\\int _{a}^b \\sqrt{ (r\\cdot  d\\theta)^2+(dr)^2 }=\\int _{a}^b \\sqrt{ r^2+\\left( \\frac{dr}{d\\theta} \\right)^2 } \\, d\\theta  \n$$\n\n\u003e**THEOREM**:\n\u003eFor $a\u003c\\theta\u003cb$, the arc length of the polar euqation $r=f(\\theta)$ is\n\u003e$$\nL=\\int _{a}^b \\sqrt{ r^2+\\left( \\frac{dr}{d\\theta} \\right)^2 } \\, d\\theta $$","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Rules-of-Differentiation":{"title":"Rules of Differentiation","content":"## Chain Rule","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Series-Convergence-Tests":{"title":"Series Convergence Tests","content":"## Test for Divergence\nSee [[wikipages/Infinite Sequence and Series#Test for Divergence|Test for Divergence]].\n\n## Integral Test\n\u003e**THEOREM** (*Integral Test*):\n\u003eSuppose $f$ is a continous, positive, decreasing function on $[1,\\infty)$ and we have $a_{n}=f(n)$. Then the following statements are true:\n\u003e$$\n\\begin{align*}\n\u0026(\\text{i}) \u0026 \u0026\\text{If }\\int_{1}^{\\infty} f(x) \\, dx \\text{ is convergent, then }\\sum ^\\infty_{n=1}a_{n} \\text{ is convergent}. \\\\\n\u0026(\\text{ii}) \u0026 \u0026\\text{If }\\int_{1}^{\\infty} f(x) \\, dx \\text{ is divergent, then }\\sum ^\\infty_{n=1}a_{n} \\text{ is divergent}. \\\\\n\\end{align*}$$\n\n## Comparison Test and Limit Comparison Test\n\u003e**THEOREM** (*Comparison Test*):\n\u003eSuppose $\\sum a_{n}$ and $\\sum b_{n}$ are series with positive terms.\n\u003e$$\n\\begin{align*}\n\u0026\\text{(i)} \u0026\u0026\\text{If }\\sum  b_{n} \\text{ is convergent and }a_{n}\\leq  b_{n} \\text{ for all }n, \\\\\n\u0026\u0026\u0026 \\text{then }\\sum a_{n} \\text{ is also convergent.} \\\\\n\u0026\\text{(ii)} \u0026\u0026\\text{If }\\sum  b_{n} \\text{ is divergent and }a_{n}\\geq b_{n} \\text{ for all }n, \\\\\n\u0026\u0026\u0026 \\text{then }\\sum a_{n} \\text{ is also divergent.} \\\\\n\\end{align*}$$\n\nWhile Comparison Test applies to many situations where the difference of two series remains positive (resp. negative). Sometimes we have the feeling that two series looks very similar, and that would be Limit Comparison Test.\n\n\u003e**THEOREM** (*Limit Comparison Test*):\n\u003eSuppose $\\sum a_{n}$ and $\\sum b_{n}$ are series with positive terms and\n\u003e$$\n\\lim_{ n \\to \\infty } \\frac{a_{n}}{b_{n}}=c$$\n\u003ethen either both series converge or both diverge.\n\n## Alternating Series Test\n\u003e**THEOREM** (*Alternating Series Test*):\n\u003eIf the alternating series\n\u003e$$\n\\begin{align*}\n\u0026\\sum^\\infty_{n=1}(-1)^{n-1}b_{n}=b_{1}-b_{2}+b_{3}-b_{4}+\\dots\u0026\u0026b_{n}\u003e0 \n\\end{align*}$$\n\u003esatisfies\n\u003e$$\n\\begin{align*}\n\\text{(i)}\u0026\u0026\u0026b_{n+1}\\leq b_{n}\u0026\u0026\\text{for all }n \\\\\n\\text{(ii)}\u0026\u0026\u0026\\lim_{ n \\to \\infty } b_{n}=0\u0026\u0026\n\\end{align*}$$\n\u003ethen the series is convergent.\n\n## Ratio and Root Test\n\u003e**THEOREM** (*Ratio Test*):\n\u003e$$\n\\begin{align*}\n\\text{(i)}\u0026\u0026\u0026\\text{If $\\lim_{ n \\to \\infty } \\left| \\frac{a_{n+1}}{a_{n}} \\right| =L\u003c1$, then the series $\\sum ^\\infty _{n=1}a_{n}$}\\\\\n\u0026\u0026\u0026\\text{is absolutely convergent (and therefore convergent).} \\\\\n\\text{(ii)}\u0026\u0026\u0026\\text{If $\\lim_{ n \\to \\infty } \\left| \\frac{a_{n+1}}{a_{n}} \\right| =L\u003e1$, then the series $\\sum ^\\infty _{n=1}a_{n}$}\\\\\n\u0026\u0026\u0026\\text{is divergent.} \\\\\n\\text{(iii)}\u0026\u0026\u0026\\text{If $\\lim_{ n \\to \\infty } \\left| \\frac{a_{n+1}}{a_{n}} \\right| =1$, the Ratio Test is inconclusive.}\\\\\n\\end{align*}$$\n\n\u003e**THEOREM** (*Root Test*):\n\u003e$$\n\\begin{align*}\n\\text{(i)}\u0026\u0026\u0026\\text{If $\\lim_{ n \\to \\infty }  \\sqrt[n]{ \\left|a_{n}\\right| }  =L\u003c1$, then the series $\\sum ^\\infty _{n=1}a_{n}$}\\\\\n\u0026\u0026\u0026\\text{is absolutely convergent (and therefore convergent).} \\\\\n\\text{(ii)}\u0026\u0026\u0026\\text{If $\\lim_{ n \\to \\infty } \\sqrt[n]{ \\left|a_{n}\\right| } =L\u003e1$, then the series $\\sum ^\\infty _{n=1}a_{n}$}\\\\\n\u0026\u0026\u0026\\text{is divergent.} \\\\\n\\text{(iii)}\u0026\u0026\u0026\\text{If $\\lim_{ n \\to \\infty } \\sqrt[n]{ \\left|a_{n}\\right| } =1$, the Ratio Test is inconclusive.}\\\\\n\\end{align*}$$\n\n## Proofs","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Series-Estimation":{"title":"Series Estimation","content":"## Integral Test Remainder Estimation\n\u003e**THEOREM**:\n\u003eSuppose $f(k)=a_k$, where $f$ is a continuous, positive, decreasing function for $x\\geq n$ and $\\sum a_{n}=s$ is convergent. If $R_n=s-s_n$, where $s_n$ is the partial sum, then\n\u003e$$\n\\int _{n+1}^\\infty f(x) \\, dx \\leq R_{n}\\leq \\int ^\\infty_{n}f(x) \\, dx $$\n\nWith this theorem, we got a better way to evaluate $\\sum a_{n}$ compared with $\\sum ^n_{i=0}a_{i}$:\n$$\n\\sum^n_{i=0}a_{i}+\\int _{n+1}^\\infty f(x) \\, dx\\leq \\sum a_{n}\\leq \\sum^n_{i=0}a_{i}+\\int ^\\infty_{n}f(x) \\, dx  \n$$\n\n## Alternating Series Remainder Estimation\n\u003e**THEOREM**:\n\u003eIf the alternating series\n\u003e$$\n\\begin{align*}\n\u0026\\sum^\\infty_{n=1}(-1)^{n-1}b_{n}=b_{1}-b_{2}+b_{3}-b_{4}+\\dots\u0026\u0026b_{n}\u003e0 \n\\end{align*}$$\n\u003esatisfies\n\u003e$$\n\\begin{align*}\n\\text{(i)}\u0026\u0026\u0026b_{n+1}\\leq b_{n}\u0026\u0026\\text{for all }n \\\\\n\\text{(ii)}\u0026\u0026\u0026\\lim_{ n \\to \\infty } b_{n}=0\u0026\u0026\n\\end{align*}$$\n\u003ethen\n\u003e$$\n\\left| R_{n} \\right| =\\left| s-s_{n} \\right| \\leq b_{n+1}$$\n\n## Taylor Series Remainder Estimation\n\u003e**THEOREM** (*Taylor's Inequality*):\n\u003eIf $|f^{(n+1)}(x)|\\leq M$ for $|x-a|\\leq d$, then the remainder $R_n(x)$ for the Taylor series satisfies the inequality\n\u003e$$\n\\begin{align*}\n\u0026\\left| R_{n}(x) \\right| \\leq \\frac{M}{(n+1)!}\\left| x-a \\right| ^{n+1}\u0026\u0026\\text{for }|x-a|\\leq d\n\\end{align*}$$","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Software-Engineering":{"title":"Software Engineering","content":"## Courses\n\n## Books\n\n## Wiki of Software Engineering","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Taylor-Series":{"title":"Taylor Series","content":"## Power Series\n\u003e**DEFINITION**:\n\u003eA **power series** is an infinite order polynomial, i.e.\n\u003e$$\n\\sum^\\infty_{n=0} c_{n}(x-a)^n=c_{0}+c_{1}(x-a)+c_{2}(x-a)^2+\\dots $$\n\u003ewhere $x$ is a variable and $c_{n}$ are constants called coefficients.\n\n## Convergence of Power Series\n\u003e**THEOREM**:\n\u003eFor a given power series $\\sum^\\infty_{n=0}c_{n}(x-a)^n$, there are only three possibilities:\n\u003e$$\n\\begin{align*}\n\\text{(i)}\u0026\u0026\u0026\\text{The series converges only when }x=a. \\\\\n\\text{(ii)}\u0026\u0026\u0026\\text{The series converges for all }x. \\\\\n\\text{(iii)}\u0026\u0026\u0026\\text{There is a positive number }R\\text{ such that the series} \\\\\n\u0026\u0026\u0026\\text{converges if }\\left| x-a \\right| \u003cR \\text{ and diverges if }\\left| x-a \\right| \u003eR. \\\\\n\u0026\u0026\u0026(R\\text{ is called the radius of convergence of }\\sum a_{n}.)\n\\end{align*}$$\n\n## Derivative and Integral of Power Series\n\u003e**THEOREM**:\n\u003eIf the power series $\\sum c_n (x-a)^n$ has radius of convergence $R\u003e0$, then the function defined by\n\u003e$$\nf(x)=\\sum^\\infty_{n=0}c_{n}(x-a)^n$$\n\u003eis differentiable (and therefore continuous) on the interval $(a-R,a+R)$ and\n\u003e$$\n\\begin{align*}\n\\text{(i)}\u0026\u0026f'(x)\u0026=\\sum^\\infty_{n=1}nc_{n}(x-a)^{n-1}\\tag{1}\n \\\\\n\\text{(ii)}\u0026\u0026\\int f(x) \\, dx\u0026=C+\\sum^\\infty_{n=0} c_{n}\\frac{(x-a)^{n+1}}{n+1} \\tag{2}\n\\end{align*}$$\n\n## Taylor Series\nTaylor series is a power series used to represent a function.\nAssume we have $f(x)=\\sum\\limits^\\infty_{n=0}c_{n}(x-a)^n$.\nThen according to Equation (1), we should have \n$$\nf'(x)=\\sum^\\infty_{n=1} nc_{n}(x-a)^{n-1}\n$$\nContinue applying this step\n$$\nf''(x)=\\sum^\\infty_{n=2}n(n-1)c_{n}(x-a)^{n-2}\n$$\nUsing mathematical induction, we can get\n$$\nf^{(i)}(x)=\\sum^\\infty_{n=i} \\frac{n!}{(n-i)!}c_{n}(x-a)^{n-i}\n$$\nApply substitution $x=a$ to the expression,\n$$\n\\begin{align*}\nf^{(i)}(a)\u0026=\\frac{i!}{(i-i)!}c_{i}(a-a)^0+\\sum^\\infty_{n=i+1} \\frac{n!}{(n-i)!}c_{n}(a-a)^{n-i} \\\\\n\u0026=i!\\cdot c_{i}\\cdot 1+0=i!\\cdot c_{i} \\\\\n\\end{align*}\n$$\nTherefore, we have\n$$\nc_{n}=\\frac{f^{(n)}(a)}{n!}\n$$\n\n\u003e**THEOREM** (*Taylor Series*):\n\u003eIf $f$ has a power series representation at $a$, i.e. $f(x)=\\sum^\\infty_{n=0}c_{n}(x-a)^n$, then the power series must be\n\u003e$$\n\\begin{align*}\n\\sum^\\infty_{n=0} \\frac{f^{(n)}(a)}{n!}(x-a)^n\u0026\u0026\\text{for }\\left| x-a \\right| \u003cR\\tag{3}\n\\end{align*}$$\n\u003eThe series in Equation (3) is called the **Taylor series** of  the function $f$ at $a$.\n\n\u003e**Example** (*Maclaurin Series*):\n\u003eBy setting $a=0$ to Taylor series, we get the **Maclaurin series**:\n\u003e$$\n\\sum^\\infty_{n=0} \\frac{f^{(n)}(0)}{n!}x^n\\tag{4}$$\n\n## Taylor Polynomial\nIt is not easy to compute infinite order polynomial (power series) in application. So normally we choose Taylor polynomials.\n\n\u003e**DEFINITION**:\n\u003eA $n$th-degree Taylor polynomial is the partial sum of Taylor series.\n\u003e$$\nT_{n}(x)=\\sum^n_{i=0} \\frac{f^{(i)}(a)}{i!}x^i$$\n\nObviously, as $n\\to \\infty$, $T_{n}(x)$ would become the Taylor series.\n\n## Remainder and Condition of Taylor Series\n### Remainder of Taylor Series\nThe remainder of Taylor series is a bit different from other series because the goal of Taylor series is to approximate a function, not a series.\n\n\u003e**DEFINITION**:\n\u003eThe **remainder of Taylor series** is the difference of $f(x)$ and $T_{n}(x)$.\n\u003e$$\nR_{n}(x)=f(x)-T_{n}(x)$$\n\nAs $n\\to \\infty$,\n$$\n\\lim_{ n \\to \\infty } T_{n}(x)=\\lim_{ n \\to \\infty } [f(x)-R_{n}(x)]=f(x)-\\lim_{ n \\to \\infty } R_{n}(x)\n$$\nIf $\\lim_{ n \\to \\infty } R_{n}(x)=0$, then it is very clear that the Taylor series equals the original function. Therefore, we have the following theorem:\n\u003e**THEOREM**:\n\u003eIf $f(x)=T_{n}(x)+R_{n}(x)$, where $T_{n}$ is the $n$th-degree Taylor polynomial of $f$ at $a$ and\n\u003e$$\n\\begin{align*}\n\\lim_{ n \\to \\infty } R_{n}=0\u0026\u0026\\text{for }\\left| x-a \\right|\u003cR \n\\end{align*}$$\n\u003ethen $f$ equals to the sum of its Taylor series on the intverval $(x-R,x+R)$.\n\n### Condition of Taylor Series\nNote that convergence of a Taylor series does not imply the Taylor series equals the original function. (Contrarily however, if Taylor series equals the original function, then it must be convergent)\n\nA canonical example is as follows\n\u003e**Example**:$$\nf(x)=\\begin{cases}\ne^{-\\frac{1}{x^2}} \u0026\\text{if }x\\neq 0 \\\\\n0 \u0026\\text{if }x=0\n\\end{cases}$$\n\u003eFor this function, the Taylor series is convergent and is constant $0$, which is obviously not the original function.\n\nTo summarize, we have to go through these following steps before saying that $f$ equals its Taylor series:\n1. The function $f$ must be infinitely differentiable.\n2. The Taylor series must be convergent.\n3. $\\lim_{ n \\to \\infty } R_{n}(x)=0$","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null},"/wikipages/Techniques-of-Integration":{"title":"Techniques of Integration","content":"## Substitution Rule\nThe most widely known integration technique must be the substitution rule.\n### Chain Rule to Substitution Rule\nWe all well know about [[Chain Rule]] in differentiation:\n$$\n\\begin{align*}\n\\frac{d}{dx}f(\\varphi(x)) \u0026=f'(\\varphi(x))\\cdot \\varphi'(x) \\tag{1}\n\\end{align*}\n$$\nThe chain rule, after some modification, would become substitution rule.\n$$\n\\begin{align*}\n\u0026\\text{Assume }F'(x)=f(x),\\\\\n\u0026\\begin{aligned}\n\\frac{d}{dx}F(\\varphi(x))\u0026=f(\\varphi(x))\\varphi'(x)\\\\\n\\int \\frac{d}{dx}F(\\varphi(x))\\ dx\u0026=\\int f(\\varphi(x))\\varphi'(x)\\ dx\\\\\nF(\\varphi(x))\u0026=\\int f(\\varphi(x))\\varphi'(x)\\ dx\\\\\n\\int f(\\varphi(x))\\varphi'(x)\\ dx\u0026=\\int f(\\varphi(x))\\ d\\varphi(x) \n\\end{aligned}\n\\end{align*}\n$$\nFinally, we can conclude that:\n\u003e**THEOREM** (*Substitution Rule*):\n\u003e$$\n\\begin{align*}\n\u0026\\int f(\\varphi(x))\\varphi'(x)\\ dx \\xlongequal{u=\\varphi(x)} \\int f(u) \\ du \\tag{2}\n\\end{align*}$$\n\n## Integration by Parts\nFrom the Product Rule, we know that\n$$\n\\frac{d}{dx}(uv)=\\frac{du}{dx}v+u\\frac{dv}{dx}\n$$\nIntegrating both parts and we get\n$$\n\\begin{align*}\n\\int \\frac{d}{dx}(uv) \\, dx\u0026=\\int v \\frac{du}{dx} \\, dx+\\int u \\frac{dv}{dx} \\, dx\\\\\nuv\u0026=\\int v \\, du+\\int u \\, dv  \n\\end{align*}\n$$\n\u003e**THEOREM** (*Integration by Parts*):\n\u003e$$\n\\int v \\, du=uv-\\int u \\, dv  $$\n\u003eDefinite form:\n\u003e$$\n\\int _{a}^b f(x)g'(x) \\, dx=f(x)g(x) ]^b_{a} -\\int _{a}^b g(x)f'(x) \\, dx $$\n\n## Trigonometric Integrals\nWe usually meet trigonometric forms like $\\int \\sin^m(x)\\cos^n(x) \\, dx$. In fact, we have a strategy for such integrals.\n\n\u003e**Strategy**:\n\u003e1. If the power of cosine is odd ($n=2k+1$), substitute one cosine.\n\u003e$$\n\\begin{align*}\n\\int \\sin^mx\\cos^{2k+1}x \\, dx\u0026=\\int \\sin^m x\\cos^{2k}x\\cdot \\cos x \\, dx\\\\\n\u0026=\\int \\sin^m x \\cos^{2k}x \\, d\\sin x\\\\\n\u0026=\\int \\sin^m x(\\cos^2x)^k \\, d\\sin x\\\\\n\u0026=\\int \\sin^m x(1-\\sin^2 x)^k \\, d\\sin x \n\\end{align*}$$\n\u003e2. If the power of sine is odd ($m=2k+1$), substitute one sine.\n\u003e$$\n\\begin{align*}\n\\int \\sin^{2k+1}x\\cos^nx \\, dx\u0026=\\int \\sin^{2k} x\\cos^nx\\cdot \\sin x \\, dx\\\\\n\u0026=-\\int \\sin^{2k} x \\cos^nx \\, d\\cos x\\\\\n\u0026=-\\int (\\sin^2 x)^k\\cos^nx \\, d\\cos x\\\\\n\u0026=-\\int (1-\\cos^2x)^k \\cos^nx \\, d\\cos x \n\\end{align*}$$\n\u003e3. If both powers are even, consider half-angle identities\n\u003e$$\n\\begin{align*}\n\\sin^2x=\\frac{1}{2}(1-\\cos 2x)\u0026\u0026\\cos^2x=\\frac{1}{2}(1+\\cos2x)\n\\end{align*}$$\n\nOne of the important reasons why we can do this is because $\\sin^2$ and $\\cos^2$ can be transformed from each other. A similar senerio happens on $\\tan$ and $\\sec$:\n$$\n\\sec^2x=1+\\tan^2x\n$$\nThus, we have the following strategy for evaluating $\\int \\tan^mx\\sec^nx \\, dx$.\n\n\u003e**Strategy**:\n\u003e1. If the power of secant is even ($n=2k,k\\geq 2$), substitute $\\sec^2$ and use identity.\n\u003e$$\n\\begin{align*}\n\\int \\tan^mx\\sec^{2k}x \\, dx\u0026=\\int \\tan^mx\\sec^{2k-2}x\\sec^2x \\, dx\\\\\n\u0026=\\int \\tan^mx(\\sec^2x)^{k-1} \\, d\\tan x\\\\\n\u0026=\\int \\tan^mx(1+\\tan^2x)^{k-1} \\, d\\tan x \n\\end{align*}$$\n\u003e2. If the power of tangent is odd ($m=2k+1$), substitute $\\sec\\tan$ and use identity.\n\u003e$$\n\\begin{align*}\n\\int \\tan^{2k+1}x\\sec^{n}x \\, dx\u0026=\\int \\tan^{2k}x\\sec^{n}x\\sec x\\tan x \\, dx\\\\\n\u0026=\\int (\\tan^2x)^k\\sec^n x \\, d\\sec x\\\\\n\u0026=\\int (\\sec^2x-1)^k\\sec^nx \\, d\\sec x \n\\end{align*}$$\n\u003e3. For other situations, the guideline is not clear.\n\n## Trigonometric Substitution\nIf we write out the expression of $y=f(x)$ for a circle $\\mathcal{C}: x^2+y^2=r^2$, we'll get $y=\\sqrt{ r^2-x^2 }$, this reveals the connection between $\\sqrt{ r^2-x^2 }$ and trigonometric functions.\n\nIf we substitute $x$ with $r\\sin\\theta$, $\\sqrt{ r^2-x^2 }=r \\cos\\theta$, $dx=r\\cos\\theta d\\theta$. The integral $\\int \\sqrt{ r^2-x^2 } \\, dx$ becomes\n$$\n\\int r\\cos\\theta \\, d(r\\sin\\theta)=\\int r^2\\cos^2\\theta \\, d\\theta\n$$\n\nThis technique is extremely important in solving radical integrals. And we can conclude a more general case:\n\n\u003e**Strategy**:\n\u003e1. $\\sqrt{ a^2-x^2 }$: $x=a\\sin\\theta$\n\u003e2. $\\sqrt{ a^2+x^2 }$: $x=a\\tan\\theta$\n\u003e3. $\\sqrt{ x^2-a^2 }$: $x=a\\sec\\theta$\n\n## Partial Fraction\nPartial fraction is derived","lastmodified":"2022-05-22T08:35:16.246579856Z","tags":null}}