{"/":{"title":"Niceme's Wiki","content":"## About the Wiki\n\nWelcome to my personal wikipedia!\n\n## MOC of the Wiki\nThe wiki includes knowledge from these subjects:\n- Computer Science\n\t1. [Computer Architecture](wikipages/Computer%20Architecture.md)\n\t2. [Software Engineering](wikipages/Software%20Engineering.md)\n- Mathematics\n\t1. [Calculus](wikipages/Calculus.md)\n- Electrical Engineering\n- Social Science\n\n\n## Content Lists\nIf you prefer browsing the contents of this site through a list instead of a graph, you can find content lists here too:\n\n- [All Notes](/notes)\n- [All Wiki Pages](/wikipages)","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/lecture_notes/ECE120/ECE120-MOC":{"title":"ECE120 MOC","content":"## Course Description\nECE120: Intro to Computing Systems is a UIUC course about the structure of computing systems.\n\n## Lecture Notes\n1. [[lecture_notes/ECE120/Lecture 1|Lecture 1]]\n2. [[lecture_notes/ECE120/Lecture 2|Lecture 2]]\n3. [[lecture_notes/ECE120/Lecture 3|Lecture 3]]\n4. [[lecture_notes/ECE120/Lecture 4|Lecture 4]]\n5. [[lecture_notes/ECE120/Lecture 5|Lecture 5]]\n6. [[Lectures/ECE120/Lecture 6|Lecture 6]]\n7. [[Lectures/ECE120/Lecture 7|Lecture 7]]\n8. [[Lectures/ECE120/Lecture 8|Lecture 8]]\n9. [[Lectures/ECE120/Lecture 9|Lecture 9]]\n10. [[Lectures/ECE120/Lecture 10|Lecture 10]]\n11. [[Lectures/ECE120/Lecture 11|Lecture 11]]\n12. [[Lectures/ECE120/Lecture 12|Lecture 12]]\n13. [[Lectures/ECE120/Lecture 13|Lecture 13]]\n\n## Lab Notes\n1. [[Lab 1]]\n2. [[Lab 2]]\n3. [[Lab 3]]\n\n## Homework Notes","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/lecture_notes/ECE120/Lecture-1":{"title":"Lecture 1","content":"## Abstraction Layer\nWhile constructing computers, we can use the idea of abstraction to make things easier:\n![[lecture_notes/ECE120/images/Pasted image 20220414144524.png]]\n\n## Representations\n\n### Definition for representation\nThe mapping from one form to another is called a representation.\n\n### Necessary condition of representations\n- Well-defined\n- Unambiguous","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/lecture_notes/ECE120/Lecture-2":{"title":"Lecture 2","content":"## Unsigned [[Lectures/ECE120/Lecture 1#Definition for representation|Representation]]\nIn order to represent an integer, the computer uses base-2 numbers from mathematics (aka. binary).\nDue to hardware limitations, we cannot create representations that use arbitrary number of bits. Therefore, we use some fixed numbers of bits to represent a certain group of numbers, which introduced leading 0s.\ne.g.\n$$\n\\begin{align}\n17_{10}=00010001_2 \\\\\n42_{10}=00101010_2 \n\\end{align}\n$$\n### Conversion from Binary to Decimal\nThe conversion from binary to decimal is quite straight forward, because the $i$th bit in binary represents $2^{i-1}$ .\ne.g. Convert $01001_2$\n$$\n01001_2 = (0 \\cdot 2^4 + 1 \\cdot 2^3+0 \\cdot 2^2+0 \\cdot 2^1+1 \\cdot 2^0)_{10}=9_{10}\n$$\n\n### Conversion from Decimal to Binary\nIt might not seem so straightforward as the previous one, but the core idea is the same.\ne.g. Convert $9_{10}$ to a 5-bit binary.\n$$\n\\begin{align}\n\u0026\\text{Assume } 9_{10} = a_4\\cdot 2^4 + a_3\\cdot 2^3 + a_2\\cdot 2^2+a_1\\cdot 2^1+a_0\\cdot2^0. \\\\\n\u0026\\text{Clearly, the parity of the number determined }a_0. \\\\\n\u0026(9-a_0) \\div 2 = a_4\\cdot 2^3 + a_3\\cdot 2^2 + a_2\\cdot 2^1+a_1\\cdot 2^0 \\\\\n\u0026\\text{Clearly, the parity of the number determined } a_1. \\\\\n\u0026((9-a_0)-a_1) \\div 2=a_4\\cdot 2^2 + a_3\\cdot 2^1 + a_2\\cdot 2^0 \\\\\n\u0026\\text{ Clearly, the parity of the number determined } a_2. \\\\\n\u0026\\cdots\n\\end{align}\n$$\n\n## Addition of Unsigned Representation\nBinary addition is almost the same as decimal addition.\ne.g. $01001_2+01110_2$\n$$\n\\begin{align}\n_1\\quad \\quad  \u0026\\\\\n01001\u0026\\\\\n+01110\u0026\\\\\n\\hline\n10111\u0026\n\\end{align}\n$$\nHowever, sometimes things go wrong.\ne.g. $01001_2+11110_2$\n$$\n\\begin{align}\n_{1\\ 1} \\quad \\quad  \u0026\\\\\n01001\u0026\\\\\n+11110\u0026\\\\\n\\hline\nâ‘ 10111\u0026\n\\end{align}\n$$\nNote there is a carry out 1. Because of bit limitation, it did not appear in the final result, causing a mismatch. This kind of phenomena is called overflow. ^19d695\n\nTo sum up, the addition result of $N$ bit binary is\n$$\nS = (A+B)\\mod 2^N\n$$\n\n## 2's Complement\nHere comes the question, how to store negative numbers?\n\nThe easiest way is [[Sign-Magnitude]]. But our topic today focuses on 2's complement representation, which is the most widely used representation in computers nowadays.\n\nThe key concept of 2's complement representation is to make use of the same addition component as unsigned representation, which is to say,\n$$\n\\begin{align*}\n\u0026\\text{For a negative number }-k, \\text{ we wish to find its reprentation }P_k.\\\\\n\u0026\\text{So that }\\forall N \\in \\mathbb{Z}, \\text{we have }(-k+N)\\equiv(P_{k}+N) \\mod 2^{N}.\n\\end{align*}\n$$","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/lecture_notes/ECE120/Lecture-3":{"title":"Lecture 3","content":"","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/lecture_notes/ECE120/Lecture-4":{"title":"Lecture 4","content":"","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/lecture_notes/ECE120/Lecture-5":{"title":"Lecture 5","content":"","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/wikipages/Calculus":{"title":"Calculus","content":"## Courses\n1. [[MATH231 MOC|MATH231]]\n2. MATH241\n3. MATH286\n\n## Books\n1. [[Calculus - James Stewart|Calculus - James Stewart]]\n\n## Wiki of Calculus\n- Single Variable Calculus\n\t- Differential Calculus\n\t\t- [Limits](wikipages/Limits.md)\n\t\t- [Derivatives](wikipages/Derivatives.md)\n\t\t- [Rules of Differentiation](wikipages/Rules%20of%20Differentiation.md)\n\t\t- Applications of Differentiation\n\t- Integral Calculus\n\t\t- [Integrals](wikipages/Integrals.md)\n\t\t- [Techniques of Integration](wikipages/Techniques%20of%20Integration.md)\n\t\t- Applications of Integration\n\t- Sequence and Series\n\t\t- [Sequence and Series](wikipages/Sequence%20and%20Series.md)\n- Multi Variable Calculus\n\t-","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/wikipages/Computer-Architecture":{"title":"Computer Architecture","content":"## Courses\n1. [[lecture_notes/ECE120/ECE120 MOC|ECE120 MOC]]\n\n## Books\n1. Intro to Computing Systems - Patt\n\n## Wiki of Computer Architecture","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/wikipages/Derivatives":{"title":"Derivatives","content":"","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/wikipages/Integrals":{"title":"Integrals","content":"","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/wikipages/Limits":{"title":"Limits","content":"","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/wikipages/Rules-of-Differentiation":{"title":"Rules of Differentiation","content":"","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/wikipages/Sequence-and-Series":{"title":"Untitled Page","content":"","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/wikipages/Software-Engineering":{"title":"Software Engineering","content":"## Courses\n\n## Books\n\n## Wiki of Software Engineering","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null},"/wikipages/Techniques-of-Integration":{"title":"Techniques of Integration","content":"","lastmodified":"2022-04-14T07:08:04.893351334Z","tags":null}}